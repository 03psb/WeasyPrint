import itertools
import os.path
import shutil
import tempfile

import pytest

from . import (
    B, G, R, V, _, a, assert_different_renderings, assert_pixels,
    assert_pixels_equal, assert_same_rendering, b, document_to_pixels, g,
    html_to_pixels, image_to_pixels, r, v)
from ... import HTML
from ...urls import ensure_url
from ..testing_utils import (
    FONTS, FakeHTML, assert_no_logs, capture_logs, requires, resource_filename)


@assert_no_logs
@pytest.mark.parametrize(
    'name, expected_width, expected_height, expected_pixels, html', (
        ('all_blue', 10, 10, (10 * [10 * B]), '''
           <style>
             @page { size: 10px }
             /* body’s background propagates to the whole canvas */
             body { margin: 2px; background: #00f; height: 5px }
           </style>
         <body>'''),
        ('blocks', 10, 10, [
         r + r + r + r + r + r + r + r + r + r,
         r + r + r + r + r + r + r + r + r + r,
         r + r + B + B + B + B + B + B + r + r,
         r + r + B + B + B + B + B + B + r + r,
         r + r + B + B + B + B + B + B + r + r,
         r + r + B + B + B + B + B + B + r + r,
         r + r + B + B + B + B + B + B + r + r,
         r + r + r + r + r + r + r + r + r + r,
         r + r + r + r + r + r + r + r + r + r,
         r + r + r + r + r + r + r + r + r + r,
         ], '''
           <style>
             @page { size: 10px }
             /* html’s background propagates to the whole canvas */
             html { padding: 1px; background: #f00 }
             /* html has a background, so body’s does not propagate */
             body { margin: 1px; background: #00f; height: 5px }
          </style>
          <body>'''),
    ))
def test_canvas_background(name, expected_width, expected_height,
                           expected_pixels, html):
    assert_pixels(name, expected_width, expected_height, expected_pixels, html)


@assert_no_logs
@pytest.mark.parametrize('name, css, pixels', (
    ('repeat', 'url(pattern.png)', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + r + B + B + B + r + B + B + B + r + B + _ + _,
        _ + _ + B + B + B + B + B + B + B + B + B + B + _ + _,
        _ + _ + B + B + B + B + B + B + B + B + B + B + _ + _,
        _ + _ + B + B + B + B + B + B + B + B + B + B + _ + _,
        _ + _ + r + B + B + B + r + B + B + B + r + B + _ + _,
        _ + _ + B + B + B + B + B + B + B + B + B + B + _ + _,
        _ + _ + B + B + B + B + B + B + B + B + B + B + _ + _,
        _ + _ + B + B + B + B + B + B + B + B + B + B + _ + _,
        _ + _ + r + B + B + B + r + B + B + B + r + B + _ + _,
        _ + _ + B + B + B + B + B + B + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ]),
    ('repeat_x', 'url(pattern.png) repeat-x', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + r + B + B + B + r + B + B + B + r + B + _ + _,
        _ + _ + B + B + B + B + B + B + B + B + B + B + _ + _,
        _ + _ + B + B + B + B + B + B + B + B + B + B + _ + _,
        _ + _ + B + B + B + B + B + B + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ]),
    ('repeat_y', 'url(pattern.png) repeat-y', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + r + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + r + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + r + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ]),

    ('left_top', 'url(pattern.png) no-repeat 0 0%', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + r + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ]),
    ('center_top', 'url(pattern.png) no-repeat 50% 0px', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + r + B + B + B + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + B + B + B + B + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + B + B + B + B + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + B + B + B + B + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ]),
    ('right_top', 'url(pattern.png) no-repeat 6px top', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + r + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ]),
    ('bottom_6_right_0', 'url(pattern.png) no-repeat bottom 6px right 0', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + r + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ]),
    ('left_center', 'url(pattern.png) no-repeat left center', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + r + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ]),
    ('center_left', 'url(pattern.png) no-repeat center left', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + r + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ]),
    ('center_center', 'url(pattern.png) no-repeat 3px 3px', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + r + B + B + B + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + B + B + B + B + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + B + B + B + B + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + B + B + B + B + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ]),
    ('right_center', 'url(pattern.png) no-repeat 100% 50%', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + r + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ]),

    ('left_bottom', 'url(pattern.png) no-repeat 0% bottom', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + r + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ]),
    ('center_bottom', 'url(pattern.png) no-repeat center 6px', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + r + B + B + B + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + B + B + B + B + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + B + B + B + B + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + B + B + B + B + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ]),
    ('bottom_center', 'url(pattern.png) no-repeat bottom center', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + r + B + B + B + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + B + B + B + B + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + B + B + B + B + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + B + B + B + B + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ]),
    ('right_bottom', 'url(pattern.png) no-repeat 6px 100%', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + r + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ]),

    ('repeat_x_1px_2px', 'url(pattern.png) repeat-x 1px 2px', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + r + B + B + B + r + B + B + B + r + _ + _,
        _ + _ + B + B + B + B + B + B + B + B + B + B + _ + _,
        _ + _ + B + B + B + B + B + B + B + B + B + B + _ + _,
        _ + _ + B + B + B + B + B + B + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ]),
    ('repeat_y_local_2px_1px', 'url(pattern.png) repeat-y local 2px 1px', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + r + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + r + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + r + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ]),

    ('fixed', 'url(pattern.png) no-repeat fixed', [
        # The image is actually here:
        #######
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,  #
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,  #
        _ + _ + B + B + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,  #
        _ + _ + B + B + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,  #
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ]),
    ('fixed_right', 'url(pattern.png) no-repeat fixed right 3px', [
        #                   x x x x
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + r + B + _ + _,  # x
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + B + B + _ + _,  # x
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + B + B + _ + _,  # x
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + B + B + _ + _,  # x
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ]),
    ('fixed_center_center', 'url(pattern.png)no-repeat fixed 50%center', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + r + B + B + B + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + B + B + B + B + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + B + B + B + B + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + B + B + B + B + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ]),
    ('multi_under', '''url(pattern.png) no-repeat,
                       url(pattern.png) no-repeat 2px 1px''', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + r + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ]),
    ('multi_over', '''url(pattern.png) no-repeat 2px 1px,
                      url(pattern.png) no-repeat''', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + r + B + B + B + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + r + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ]),
))
def test_background_image(name, css, pixels):
    # pattern.png looks like this:

    #    r + B + B + B,
    #    B + B + B + B,
    #    B + B + B + B,
    #    B + B + B + B,

    assert_pixels('background_' + name, 14, 16, pixels, '''
      <style>
        @page { size: 14px 16px }
        html { background: #fff }
        body { margin: 2px; height: 10px;
               background: %s }
        p { background: none }
      </style>
      <body>
      <p>&nbsp;''' % css)


@assert_no_logs
def test_background_image_zero_size_background():
    # Regression test for https://github.com/Kozea/WeasyPrint/issues/217
    assert_pixels('zero_size_background', 10, 10, [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ], '''
      <style>
        @page { size: 10px }
        html { background: #fff }
        body { background: url(pattern.png);
               background-size: cover;
               display: inline-block }
      </style>
      <body>''')


@assert_no_logs
def test_background_origin():
    """Test the background-origin property."""
    def test_value(value, pixels, css=None):
        assert_pixels('background_origin_' + value, 12, 12, pixels, '''
            <style>
                @page { size: 12px }
                html { background: #fff }
                body { margin: 1px; padding: 1px; height: 6px;
                       border: 1px solid  transparent;
                       background: url(pattern.png) bottom right no-repeat;
                       background-origin: %s }
            </style>
            <body>''' % (css or value,))

    test_value('border-box', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + r + B + B + B + _,
        _ + _ + _ + _ + _ + _ + _ + B + B + B + B + _,
        _ + _ + _ + _ + _ + _ + _ + B + B + B + B + _,
        _ + _ + _ + _ + _ + _ + _ + B + B + B + B + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ])
    test_value('padding-box', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + r + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ])
    test_value('content-box', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + r + B + B + B + _ + _ + _,
        _ + _ + _ + _ + _ + B + B + B + B + _ + _ + _,
        _ + _ + _ + _ + _ + B + B + B + B + _ + _ + _,
        _ + _ + _ + _ + _ + B + B + B + B + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ])

    test_value('border-box_clip', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + r + B + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + B + B + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ], css='border-box; background-clip: content-box')


@assert_no_logs
def test_background_repeat_space_1():
    assert_pixels('background_repeat_space', 12, 16, [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + r + B + B + B + _ + _ + r + B + B + B + _,
        _ + B + B + B + B + _ + _ + B + B + B + B + _,
        _ + B + B + B + B + _ + _ + B + B + B + B + _,
        _ + B + B + B + B + _ + _ + B + B + B + B + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + r + B + B + B + _ + _ + r + B + B + B + _,
        _ + B + B + B + B + _ + _ + B + B + B + B + _,
        _ + B + B + B + B + _ + _ + B + B + B + B + _,
        _ + B + B + B + B + _ + _ + B + B + B + B + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + r + B + B + B + _ + _ + r + B + B + B + _,
        _ + B + B + B + B + _ + _ + B + B + B + B + _,
        _ + B + B + B + B + _ + _ + B + B + B + B + _,
        _ + B + B + B + B + _ + _ + B + B + B + B + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ], '''
      <style>
        @page { size: 12px 16px }
        html { background: #fff }
        body { margin: 1px; height: 14px;
               background: url(pattern.png) space; }
      </style>
      <body>''')


@assert_no_logs
def test_background_repeat_space_2():
    assert_pixels('background_repeat_space', 12, 14, [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + r + B + B + B + _ + _ + r + B + B + B + _,
        _ + B + B + B + B + _ + _ + B + B + B + B + _,
        _ + B + B + B + B + _ + _ + B + B + B + B + _,
        _ + B + B + B + B + _ + _ + B + B + B + B + _,
        _ + r + B + B + B + _ + _ + r + B + B + B + _,
        _ + B + B + B + B + _ + _ + B + B + B + B + _,
        _ + B + B + B + B + _ + _ + B + B + B + B + _,
        _ + B + B + B + B + _ + _ + B + B + B + B + _,
        _ + r + B + B + B + _ + _ + r + B + B + B + _,
        _ + B + B + B + B + _ + _ + B + B + B + B + _,
        _ + B + B + B + B + _ + _ + B + B + B + B + _,
        _ + B + B + B + B + _ + _ + B + B + B + B + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ], '''
      <style>
        @page { size: 12px 14px }
        html { background: #fff }
        body { margin: 1px; height: 12px;
               background: url(pattern.png) space; }
      </style>
      <body>''')


@assert_no_logs
def test_background_repeat_space_3():
    assert_pixels('background_repeat_space', 12, 13, [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + r + B + B + B + r + B + B + B + r + B + _,
        _ + B + B + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + B + B + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + r + B + B + B + r + B + B + B + r + B + _,
        _ + B + B + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + B + B + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ], '''
      <style>
        @page { size: 12px 13px }
        html { background: #fff }
        body { margin: 1px; height: 11px;
               background: url(pattern.png) repeat space; }
      </style>
      <body>''')


@assert_no_logs
def test_background_repeat_round_1():
    assert_pixels('background_repeat_round', 10, 14, [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + r + r + B + B + B + B + B + B + _,
        _ + r + r + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + r + r + B + B + B + B + B + B + _,
        _ + r + r + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ], '''
      <style>
        @page { size: 10px 14px }
        html { background: #fff }
        body { margin: 1px; height: 12px;
               image-rendering: pixelated;
               background: url(pattern.png) top/6px round repeat; }
      </style>
      <body>''')


@assert_no_logs
def test_background_repeat_round_2():
    assert_pixels('background_repeat_round', 10, 18, [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + r + r + B + B + B + B + B + B + _,
        _ + r + r + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + r + r + B + B + B + B + B + B + _,
        _ + r + r + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ], '''
      <style>
        @page { size: 10px 18px }
        html { background: #fff }
        body { margin: 1px; height: 16px;
               image-rendering: pixelated;
               background: url(pattern.png) center/auto 8px repeat round; }
      </style>
      <body>''')


@assert_no_logs
def test_background_repeat_round_3():
    assert_pixels('background_repeat_round', 10, 14, [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + r + r + B + B + B + B + B + B + _,
        _ + r + r + B + B + B + B + B + B + _,
        _ + r + r + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ], '''
      <style>
        @page { size: 10px 14px }
        html { background: #fff }
        body { margin: 1px; height: 12px;
               image-rendering: pixelated;
               background: url(pattern.png) center/6px 9px round; }
      </style>
      <body>''')


@assert_no_logs
def test_background_repeat_round_4():
    assert_pixels('background_repeat_round', 10, 14, [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + r + B + B + B + r + B + B + B + _,
        _ + r + B + B + B + r + B + B + B + _,
        _ + r + B + B + B + r + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ], '''
      <style>
        @page { size: 10px 14px }
        html { background: #fff }
        body { margin: 1px; height: 12px;
               image-rendering: pixelated;
               background: url(pattern.png) center/5px 9px round; }
      </style>
      <body>''')


@assert_no_logs
@pytest.mark.parametrize('value, pixels', (
    ('#00f border-box', [
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + _,
        _ + _ + _ + _ + _ + _ + _ + _,
    ]),
    ('#00f padding-box', [
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _,
        _ + _ + B + B + B + B + _ + _,
        _ + _ + B + B + B + B + _ + _,
        _ + _ + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
    ]),
    ('#00f content-box', [
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + B + B + _ + _ + _,
        _ + _ + _ + B + B + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
    ]),
    ('url(pattern.png) padding-box, #0f0', [
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + G + G + G + G + G + G + _,
        _ + G + r + B + B + B + G + _,
        _ + G + B + B + B + B + G + _,
        _ + G + B + B + B + B + G + _,
        _ + G + B + B + B + B + G + _,
        _ + G + G + G + G + G + G + _,
        _ + _ + _ + _ + _ + _ + _ + _,
    ]),
))
def test_background_clip(value, pixels):
    assert_pixels('background_clip_' + value, 8, 8, pixels, '''
      <style>
        @page { size: 8px }
        html { background: #fff }
        body { margin: 1px; padding: 1px; height: 2px;
               border: 1px solid  transparent;
               background: %s }
      </style>
      <body>''' % value)


@assert_no_logs
@pytest.mark.parametrize(
    'name, expected_width, expected_height, expected_pixels, html', (
        ('background_size', 12, 12, [
         _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
         _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
         _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
         _ + _ + _ + r + r + B + B + B + B + B + B + _,
         _ + _ + _ + r + r + B + B + B + B + B + B + _,
         _ + _ + _ + B + B + B + B + B + B + B + B + _,
         _ + _ + _ + B + B + B + B + B + B + B + B + _,
         _ + _ + _ + B + B + B + B + B + B + B + B + _,
         _ + _ + _ + B + B + B + B + B + B + B + B + _,
         _ + _ + _ + B + B + B + B + B + B + B + B + _,
         _ + _ + _ + B + B + B + B + B + B + B + B + _,
         _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
         ], '''
           <style>
             @page { size: 12px }
             html { background: #fff }
             body { margin: 1px; height: 10px;
                    /* Use nearest neighbor algorithm for image resizing: */
                    image-rendering: pixelated;
                    background: url(pattern.png) no-repeat
                                bottom right / 80% 8px; }
           </style>
           <body>'''),
        ('background_size_auto', 12, 12, [
         _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
         _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
         _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
         _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
         _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
         _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
         _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
         _ + _ + _ + _ + _ + _ + _ + r + B + B + B + _,
         _ + _ + _ + _ + _ + _ + _ + B + B + B + B + _,
         _ + _ + _ + _ + _ + _ + _ + B + B + B + B + _,
         _ + _ + _ + _ + _ + _ + _ + B + B + B + B + _,
         _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
         ], '''
           <style>
             @page { size: 12px }
             html { background: #fff }
             body { margin: 1px; height: 10px;
                    /* Use nearest neighbor algorithm for image resizing: */
                    image-rendering: pixelated;
                    background: url(pattern.png) bottom right/auto no-repeat }
           </style>
           <body>'''),
        ('background_size_contain', 14, 10, [
         _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
         _ + r + r + B + B + B + B + B + B + _ + _ + _ + _ + _,
         _ + r + r + B + B + B + B + B + B + _ + _ + _ + _ + _,
         _ + B + B + B + B + B + B + B + B + _ + _ + _ + _ + _,
         _ + B + B + B + B + B + B + B + B + _ + _ + _ + _ + _,
         _ + B + B + B + B + B + B + B + B + _ + _ + _ + _ + _,
         _ + B + B + B + B + B + B + B + B + _ + _ + _ + _ + _,
         _ + B + B + B + B + B + B + B + B + _ + _ + _ + _ + _,
         _ + B + B + B + B + B + B + B + B + _ + _ + _ + _ + _,
         _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
         ], '''
           <style>
             @page { size: 14px 10px }
             html { background: #fff }
             body { margin: 1px; height: 8px;
                    /* Use nearest neighbor algorithm for image resizing: */
                    image-rendering: pixelated;
                    background: url(pattern.png) no-repeat;
                    background-size: contain }
           </style>
           <body>'''),

        ('background_size_mixed', 14, 10, [
         _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
         _ + r + r + B + B + B + B + B + B + _ + _ + _ + _ + _,
         _ + r + r + B + B + B + B + B + B + _ + _ + _ + _ + _,
         _ + B + B + B + B + B + B + B + B + _ + _ + _ + _ + _,
         _ + B + B + B + B + B + B + B + B + _ + _ + _ + _ + _,
         _ + B + B + B + B + B + B + B + B + _ + _ + _ + _ + _,
         _ + B + B + B + B + B + B + B + B + _ + _ + _ + _ + _,
         _ + B + B + B + B + B + B + B + B + _ + _ + _ + _ + _,
         _ + B + B + B + B + B + B + B + B + _ + _ + _ + _ + _,
         _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
         ], '''
           <style>
             @page { size: 14px 10px }
             html { background: #fff }
             body { margin: 1px; height: 8px;
                    /* Use nearest neighbor algorithm for image resizing: */
                    image-rendering: pixelated;
                    background: url(pattern.png) no-repeat left / auto 8px;
                    clip: auto; /* no-op to cover more validation */ }
           </style>
           <body>'''),
        ('background_size_double', 14, 10, [
         _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
         _ + r + r + B + B + B + B + B + B + _ + _ + _ + _ + _,
         _ + B + B + B + B + B + B + B + B + _ + _ + _ + _ + _,
         _ + B + B + B + B + B + B + B + B + _ + _ + _ + _ + _,
         _ + B + B + B + B + B + B + B + B + _ + _ + _ + _ + _,
         _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
         _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
         _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
         _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
         _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
         ], '''
           <style>
             @page { size: 14px 10px }
             html { background: #fff }
             body { margin: 1px; height: 8px;
                    /* Use nearest neighbor algorithm for image resizing: */
                    image-rendering: pixelated;
                    background: url(pattern.png) no-repeat 0 0 / 8px 4px;
                    clip: auto; /* no-op to cover more validation */ }
           </style>
           <body>'''),
        ('background_size_cover', 14, 10, [
         _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
         _ + r + r + r + B + B + B + B + B + B + B + B + B + _,
         _ + r + r + r + B + B + B + B + B + B + B + B + B + _,
         _ + r + r + r + B + B + B + B + B + B + B + B + B + _,
         _ + B + B + B + B + B + B + B + B + B + B + B + B + _,
         _ + B + B + B + B + B + B + B + B + B + B + B + B + _,
         _ + B + B + B + B + B + B + B + B + B + B + B + B + _,
         _ + B + B + B + B + B + B + B + B + B + B + B + B + _,
         _ + B + B + B + B + B + B + B + B + B + B + B + B + _,
         _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
         ], '''
           <style>
             @page { size: 14px 10px }
             html { background: #fff }
             body { margin: 1px; height: 8px;
                    /* Use nearest neighbor algorithm for image resizing: */
                    image-rendering: pixelated;
                    background: url(pattern.png) no-repeat right 0/cover }
           </style>
           <body>'''),
    )
)
def test_background_size(name, expected_width, expected_height,
                         expected_pixels, html):
    assert_pixels(
        name, expected_width, expected_height, expected_pixels, html)


@assert_no_logs
@pytest.mark.parametrize('position, pixels', (
    ('outside',
     #  ++++++++++++++      ++++  <li> horizontal margins: 7px 2px
     #                ######      <li> width: 12 - 7 - 2 = 3px
     #              --            list marker margin: 0.5em = 2px
     #      ********              list marker image is 4px wide
     [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + r + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
     ]),
    ('inside',
     #  ++++++++++++++      ++++  <li> horizontal margins: 7px 2px
     #                ######      <li> width: 12 - 7 - 2 = 3px
     #                ********    list marker image is 4px wide: overflow
     [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + r + B + B + B + _,
        _ + _ + _ + _ + _ + _ + _ + B + B + B + B + _,
        _ + _ + _ + _ + _ + _ + _ + B + B + B + B + _,
        _ + _ + _ + _ + _ + _ + _ + B + B + B + B + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
     ])
))
def test_list_style_image(position, pixels):
    assert_pixels('list_style_image_' + position, 12, 10, pixels, '''
      <style>
        @page { size: 12px 10px }
        body { margin: 0; background: white; font-family: %s }
        ul { margin: 2px 2px 0 7px; list-style: url(pattern.png) %s;
             font-size: 2px }
      </style>
      <ul><li></li></ul>''' % (FONTS, position))


@assert_no_logs
def test_list_style_image_none():
    assert_pixels('list_style_none', 10, 10, [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ], '''
      <style>
        @page { size: 10px }
        body { margin: 0; background: white; font-family: %s }
        ul { margin: 0 0 0 5px; list-style: none; font-size: 2px; }
      </style>
      <ul><li>''' % (FONTS,))


centered_image = [
    _ + _ + _ + _ + _ + _ + _ + _,
    _ + _ + _ + _ + _ + _ + _ + _,
    _ + _ + r + B + B + B + _ + _,
    _ + _ + B + B + B + B + _ + _,
    _ + _ + B + B + B + B + _ + _,
    _ + _ + B + B + B + B + _ + _,
    _ + _ + _ + _ + _ + _ + _ + _,
    _ + _ + _ + _ + _ + _ + _ + _,
]
blue_image = [
    _ + _ + _ + _ + _ + _ + _ + _,
    _ + _ + _ + _ + _ + _ + _ + _,
    _ + _ + a + a + a + a + _ + _,
    _ + _ + a + a + a + a + _ + _,
    _ + _ + a + a + a + a + _ + _,
    _ + _ + a + a + a + a + _ + _,
    _ + _ + _ + _ + _ + _ + _ + _,
    _ + _ + _ + _ + _ + _ + _ + _,
]
no_image = [
    _ + _ + _ + _ + _ + _ + _ + _,
    _ + _ + _ + _ + _ + _ + _ + _,
    _ + _ + _ + _ + _ + _ + _ + _,
    _ + _ + _ + _ + _ + _ + _ + _,
    _ + _ + _ + _ + _ + _ + _ + _,
    _ + _ + _ + _ + _ + _ + _ + _,
    _ + _ + _ + _ + _ + _ + _ + _,
    _ + _ + _ + _ + _ + _ + _ + _,
]
page_break = [
    _ + _ + _ + _ + _ + _ + _ + _,
    _ + _ + _ + _ + _ + _ + _ + _,
    _ + _ + r + B + B + B + _ + _,
    _ + _ + B + B + B + B + _ + _,
    _ + _ + B + B + B + B + _ + _,
    _ + _ + B + B + B + B + _ + _,
    _ + _ + _ + _ + _ + _ + _ + _,
    _ + _ + _ + _ + _ + _ + _ + _,

    _ + _ + _ + _ + _ + _ + _ + _,
    _ + _ + _ + _ + _ + _ + _ + _,
    _ + _ + _ + _ + _ + _ + _ + _,
    _ + _ + _ + _ + _ + _ + _ + _,
    _ + _ + _ + _ + _ + _ + _ + _,
    _ + _ + _ + _ + _ + _ + _ + _,
    _ + _ + _ + _ + _ + _ + _ + _,
    _ + _ + _ + _ + _ + _ + _ + _,

    _ + _ + _ + _ + _ + _ + _ + _,
    _ + _ + _ + _ + _ + _ + _ + _,
    _ + _ + r + B + B + B + _ + _,
    _ + _ + B + B + B + B + _ + _,
    _ + _ + B + B + B + B + _ + _,
    _ + _ + B + B + B + B + _ + _,
    _ + _ + _ + _ + _ + _ + _ + _,
    _ + _ + _ + _ + _ + _ + _ + _,
]


@assert_no_logs
@pytest.mark.parametrize('filename, image', (
    ('pattern.svg', centered_image),
    ('pattern.png', centered_image),
    ('pattern.palette.png', centered_image),
    ('pattern.gif', centered_image),
    ('blue.jpg', blue_image)
))
def test_images(filename, image):
    assert_pixels('inline_image_' + filename, 8, 8, image, '''
      <style>
        @page { size: 8px }
        body { margin: 2px 0 0 2px; background: #fff; font-size: 0 }
      </style>
      <div><img src="%s"></div>''' % filename)


@assert_no_logs
def test_images_block():
    assert_pixels('block_image', 8, 8, centered_image, '''
      <style>
        @page { size: 8px }
        body { margin: 0; background: #fff; font-size: 0 }
        img { display: block; margin: 2px auto 0 }
      </style>
      <div><img src="pattern.png"></div>''')


@assert_no_logs
def test_images_not_found():
    with capture_logs() as logs:
        assert_pixels('image_not_found', 8, 8, no_image, '''
          <style>
            @page { size: 8px }
            body { margin: 0; background: #fff; font-size: 0 }
            img { display: block; margin: 2px auto 0 }
          </style>
          <div><img src="inexistent1.png" alt=""></div>''')
    assert len(logs) == 1
    assert 'ERROR: Failed to load image' in logs[0]
    assert 'inexistent1.png' in logs[0]


@assert_no_logs
def test_images_no_src():
    assert_pixels('image_no_src', 8, 8, no_image, '''
      <style>
        @page { size: 8px }
        body { margin: 0; background: #fff; font-size: 0 }
        img { display: block; margin: 2px auto 0 }
      </style>
      <div><img alt=""></div>''')


@assert_no_logs
def test_images_alt():
    with capture_logs() as logs:
        assert_same_rendering(200, 30, [
            (name, '''
              <style>
                @page { size: 200px 30px }
                body { margin: 0; background: #fff; font-size: 0 }
              </style>
              <div>%s</div>''' % html)
            for name, html in [
                ('image_alt_text_reference', 'Hello, world!'),
                ('image_alt_text_not_found',
                    '<img src="inexistent2.png" alt="Hello, world!">'),
                ('image_alt_text_no_src',
                    '<img alt="Hello, world!">'),
                ('image_svg_no_intrinsic_size',
                    '''<img src="data:image/svg+xml,<svg></svg>"
                            alt="Hello, world!">'''),
            ]
        ])
    assert len(logs) == 1
    assert 'ERROR: Failed to load image' in logs[0]
    assert 'inexistent2.png' in logs[0]


@assert_no_logs
def test_images_no_width():
    assert_pixels('image_0x1', 8, 8, no_image, '''
      <style>
        @page { size: 8px }
        body { margin: 2px; background: #fff; font-size: 0 }
      </style>
      <div><img src="pattern.png" alt="not shown"
                style="width: 0; height: 1px"></div>''')


@assert_no_logs
def test_images_no_height():
    assert_pixels('image_1x0', 8, 8, no_image, '''
      <style>
        @page { size: 8px }
        body { margin: 2px; background: #fff; font-size: 0 }
      </style>
      <div><img src="pattern.png" alt="not shown"
                style="width: 1px; height: 0"></div>''')


@assert_no_logs
def test_images_no_width_height():
    assert_pixels('image_0x0', 8, 8, no_image, '''
      <style>
        @page { size: 8px }
        body { margin: 2px; background: #fff; font-size: 0 }
      </style>
      <div><img src="pattern.png" alt="not shown"
                style="width: 0; height: 0"></div>''')


@assert_no_logs
def test_images_page_break():
    assert_pixels('image_page_break', 8, 3 * 8, page_break, '''
      <style>
        @page { size: 8px; margin: 2px; background: #fff }
        body { font-size: 0 }
      </style>
      <div><img src="pattern.png"></div>
      <div style="page-break-before: right"><img src="pattern.png"></div>''')


@assert_no_logs
def test_images_padding():
    # Regression test: padding used to be ignored on images
    assert_pixels('image_with_padding', 8, 8, centered_image, '''
      <style>
        @page { size: 8px; background: #fff }
        body { font-size: 0 }
      </style>
      <div style="line-height: 1px">
        <img src=pattern.png style="padding: 2px 0 0 2px">
      </div>''')


@assert_no_logs
def test_images_in_inline_block():
    # Regression test: this used to cause an exception
    assert_pixels('image_in_inline_block', 8, 8, centered_image, '''
      <style>
        @page { size: 8px }
        body { margin: 2px 0 0 2px; background: #fff; font-size: 0 }
      </style>
      <div style="display: inline-block">
        <p><img src=pattern.png></p>
      </div>''')


@assert_no_logs
def test_images_shared_pattern():
    # The same image is used in a repeating background,
    # then in a non-repating <img>.
    # If Pattern objects are shared carelessly, the image will be repeated.
    assert_pixels('image_shared_pattern', 12, 12, [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + a + a + a + a + a + a + a + a + _ + _,
        _ + _ + a + a + a + a + a + a + a + a + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + a + a + a + a + _ + _ + _ + _ + _ + _,
        _ + _ + a + a + a + a + _ + _ + _ + _ + _ + _,
        _ + _ + a + a + a + a + _ + _ + _ + _ + _ + _,
        _ + _ + a + a + a + a + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ], '''
      <style>
        @page { size: 12px }
        body { margin: 2px; background: #fff; font-size: 0 }
      </style>
      <div style="background: url(blue.jpg);
                  height: 2px; margin-bottom: 1px"></div>
      <img src=blue.jpg>
    ''')


def test_image_resolution():
    assert_same_rendering(20, 20, [
        ('image_resolution_ref', '''
            <style>@page { size: 20px; margin: 2px; background: #fff }</style>
            <div style="font-size: 0">
                <img src="pattern.png" style="width: 8px"></div>
        '''),
        ('image_resolution_img', '''
            <style>@page { size: 20px; margin: 2px; background: #fff }</style>
            <div style="image-resolution: .5dppx; font-size: 0">
                <img src="pattern.png"></div>
        '''),
        ('image_resolution_content', '''
            <style>@page { size: 20px; margin: 2px; background: #fff }
                   div::before { content: url(pattern.png) }
            </style>
            <div style="image-resolution: .5dppx; font-size: 0"></div>
        '''),
        ('image_resolution_background', '''
            <style>@page { size: 20px; margin: 2px; background: #fff }
            </style>
            <div style="height: 16px; image-resolution: .5dppx;
                        background: url(pattern.png) no-repeat"></div>
        '''),
    ])


visibility_source = '''
  <style>
    @page { size: 12px 7px }
    body { background: #fff; font: 1px/1 serif }
    img { margin: 1px 0 0 1px; }
    %(extra_css)s
  </style>
  <div>
    <img src="pattern.png">
    <span><img src="pattern.png"></span>
  </div>'''


@assert_no_logs
def test_visibility_1():
    assert_pixels('visibility_reference', 12, 7, [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + r + B + B + B + _ + r + B + B + B + _ + _,
        _ + B + B + B + B + _ + B + B + B + B + _ + _,
        _ + B + B + B + B + _ + B + B + B + B + _ + _,
        _ + B + B + B + B + _ + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ], visibility_source % {'extra_css': ''})


@assert_no_logs
def test_visibility_2():
    assert_pixels('visibility_hidden', 12, 7, [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ], visibility_source % {'extra_css': 'div { visibility: hidden }'})


@assert_no_logs
def test_visibility_3():
    assert_pixels('visibility_mixed', 12, 7, [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + r + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ], visibility_source % {'extra_css': '''div { visibility: hidden }
                                 span { visibility: visible } '''})


@assert_no_logs
def test_before_after_1():
    assert_same_rendering(300, 30, [
        ('pseudo_before', '''
            <style>
                @page { size: 300px 30px }
                body { margin: 0; background: #fff }
                a[href]:before { content: '[' attr(href) '] ' }
            </style>
            <p><a href="some url">some content</a></p>
        '''),
        ('pseudo_before_reference', '''
            <style>
                @page { size: 300px 30px }
                body { margin: 0; background: #fff }
            </style>
            <p><a href="another url"><span>[some url] </span>some content</p>
        ''')
    ], tolerance=10)


@assert_no_logs
def test_before_after_2():
    assert_same_rendering(500, 30, [
        ('pseudo_quotes', '''
            <style>
                @page { size: 500px 30px }
                body { margin: 0; background: #fff; quotes: '«' '»' '“' '”' }
                q:before { content: open-quote ' '}
                q:after { content: ' ' close-quote }
            </style>
            <p><q>Lorem ipsum <q>dolor</q> sit amet</q></p>
        '''),
        ('pseudo_quotes_reference', '''
            <style>
                @page { size: 500px 30px }
                body { margin: 0; background: #fff }
                q:before, q:after { content: none }
            </style>
            <p><span><span>« </span>Lorem ipsum
                <span><span>“ </span>dolor<span> ”</span></span>
                sit amet<span> »</span></span></p>
        ''')
    ], tolerance=10)


@assert_no_logs
def test_before_after_3():
    assert_same_rendering(100, 30, [
        ('pseudo_url', '''
            <style>
                @page { size: 100px 30px }
                body { margin: 0; background: #fff; }
                p:before { content: 'a' url(pattern.png) 'b'}
            </style>
            <p>c</p>
        '''),
        ('pseudo_url_reference', '''
            <style>
                @page { size: 100px 30px }
                body { margin: 0; background: #fff }
            </style>
            <p><span>a<img src="pattern.png" alt="Missing image">b</span>c</p>
        ''')
    ], tolerance=10)


@assert_no_logs
def test_borders(margin='10px', prop='border'):
    """Test the rendering of borders"""
    source = '''
      <style>
        @page { size: 140px 110px }
        html { background: #fff }
        body { width: 100px; height: 70px;
               margin: %s; %s: 10px %s blue }
      </style>
      <body>'''

    # Do not test the exact rendering of earch border style but at least
    # check that they do not do the same.
    assert_different_renderings(140, 110, [
        ('%s_%s' % (prop, border_style), source % (margin, prop, border_style))
        for border_style in [
            'none', 'solid', 'dashed', 'dotted', 'double',
            'inset', 'outset', 'groove', 'ridge']])

    css_margin = margin
    width = 140
    height = 110
    margin = 10
    border = 10
    solid_pixels = [[_] * width for y in range(height)]
    for x in range(margin, width - margin):
        for y in itertools.chain(
                range(margin, margin + border),
                range(height - margin - border, height - margin)):
            solid_pixels[y][x] = B
    for y in range(margin, height - margin):
        for x in itertools.chain(
                range(margin, margin + border),
                range(width - margin - border, width - margin)):
            solid_pixels[y][x] = B
    solid_pixels = [b''.join(line) for line in solid_pixels]
    assert_pixels(
        prop + '_solid', 140, 110, solid_pixels,
        source % (css_margin, prop, 'solid'))


@assert_no_logs
def test_outlines():
    return test_borders(margin='20px', prop='outline')


@assert_no_logs
def test_small_borders_1():
    # Regression test for ZeroDivisionError on dashed or dotted borders
    # smaller than a dash/dot.
    # https://github.com/Kozea/WeasyPrint/issues/49
    html = '''
      <style>
        @page { size: 50px 50px }
        html { background: #fff }
        body { margin: 5px; height: 0; border: 10px %s blue }
      </style>
      <body>'''
    for style in ['none', 'solid', 'dashed', 'dotted']:
        HTML(string=html % style).write_image_surface()


@assert_no_logs
def test_small_borders_2():
    # Regression test for ZeroDivisionError on dashed or dotted borders
    # smaller than a dash/dot.
    # https://github.com/Kozea/WeasyPrint/issues/146
    html = '''
      <style>
        @page { size: 50px 50px }
        html { background: #fff }
        body { height: 0; width: 0; border-width: 1px 0; border-style: %s }
      </style>
      <body>'''
    for style in ['none', 'solid', 'dashed', 'dotted']:
        HTML(string=html % style).write_image_surface()


@assert_no_logs
def test_margin_boxes():
    assert_pixels('margin_boxes', 15, 15, [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + G + G + G + _ + _ + _ + _ + _ + _ + B + B + B + B + _,
        _ + G + G + G + _ + _ + _ + _ + _ + _ + B + B + B + B + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + R + R + R + R + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + R + R + R + R + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + R + R + R + R + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + R + R + R + R + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + b + b + b + _ + _ + _ + _ + _ + _ + g + g + g + g + _,
        _ + b + b + b + _ + _ + _ + _ + _ + _ + g + g + g + g + _,
        _ + b + b + b + _ + _ + _ + _ + _ + _ + g + g + g + g + _,
        _ + b + b + b + _ + _ + _ + _ + _ + _ + g + g + g + g + _,
        _ + b + b + b + _ + _ + _ + _ + _ + _ + g + g + g + g + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ], '''
      <style>
        html { height: 100% }
        body { background: #f00; height: 100% }
        @page {
          size: 15px;
          margin: 4px 6px 7px 5px;
          background: white;

          @top-left-corner {
            margin: 1px;
            content: " ";
            background: #0f0;
          }
          @top-right-corner {
            margin: 1px;
            content: " ";
            background: #00f;
          }
          @bottom-right-corner {
            margin: 1px;
            content: " ";
            background: #008000;
          }
          @bottom-left-corner {
            margin: 1px;
            content: " ";
            background: #000080;
          }
        }
      </style>
      <body>''')


@assert_no_logs
def test_unicode():
    text = 'I løvë Unicode'
    style = '''
      @page {
        background: #fff;
        size: 200px 50px;
      }
      p { color: blue }
    '''
    _doc, expected_lines = html_to_pixels('unicode_reference', 200, 50, '''
      <style>{0}</style>
      <p><img src="pattern.png"> {1}</p>
    '''.format(style, text))

    temp = tempfile.mkdtemp(prefix=text + '-')
    try:
        stylesheet = os.path.join(temp, 'style.css')
        image = os.path.join(temp, 'pattern.png')
        html = os.path.join(temp, 'doc.html')
        with open(stylesheet, 'wb') as fd:
            fd.write(style.encode('utf8'))
        with open(resource_filename('pattern.png'), 'rb') as fd:
            image_content = fd.read()
        with open(image, 'wb') as fd:
            fd.write(image_content)
        with open(html, 'wb') as fd:
            html_content = '''
              <link rel=stylesheet href="{0}">
              <p><img src="{1}"> {2}</p>
            '''.format(
                ensure_url(stylesheet), ensure_url(image), text
            )
            fd.write(html_content.encode('utf8'))

        # TODO: change this back to actually read from a file
        document = FakeHTML(html, encoding='utf8')
        lines = document_to_pixels(document, 'unicode', 200, 50)
        assert_pixels_equal('unicode', 200, 50, lines, expected_lines)
    finally:
        shutil.rmtree(temp)


@assert_no_logs
def test_overflow_1():
    # See test_images
    assert_pixels('inline_image_overflow', 8, 8, [
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + r + B + B + B + _ + _,
        _ + _ + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
    ], '''
      <style>
        @page { size: 8px }
        body { margin: 2px 0 0 2px; background: #fff; font-size:0 }
        div { height: 2px; overflow: hidden }
      </style>
      <div><img src="pattern.png"></div>''')


@assert_no_logs
def test_overflow_2():
    # <body> is only 1px high, but its overflow is propageted to the viewport
    # ie. the padding edge of the page box.
    assert_pixels('inline_image_viewport_overflow', 8, 8, [
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + r + B + B + B + _ + _,
        _ + _ + B + B + B + B + _ + _,
        _ + _ + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
    ], '''
      <style>
        @page { size: 8px; background: #fff;
                margin: 2px;
                padding-bottom: 2px;
                border-bottom: 1px transparent solid; }
        body { height: 1px; overflow: hidden; font-size: 0 }
      </style>
      <div><img src="pattern.png"></div>''')


@assert_no_logs
def test_overflow_3():
    # Assert that the border is not clipped by overflow: hidden
    assert_pixels('border_box_overflow', 8, 8, [
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _,
        _ + _ + B + _ + _ + B + _ + _,
        _ + _ + B + _ + _ + B + _ + _,
        _ + _ + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
    ], '''
      <style>
        @page { size: 8px; background: #fff; margin: 2px; }
        div { width: 2px; height: 2px; overflow: hidden;
              border: 1px solid blue; }
      </style>
      <div></div>''')


@assert_no_logs
@requires('cairo', (1, 12, 0))
@pytest.mark.parametrize('number, css, pixels', (
    (1, '5px, 5px, 9px, auto', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + r + B + B + B + r + B + g + _,
        _ + _ + _ + _ + _ + _ + B + B + B + B + B + B + g + _,
        _ + _ + _ + _ + _ + _ + B + B + B + B + B + B + g + _,
        _ + _ + _ + _ + _ + _ + B + B + B + B + B + B + g + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ]),
    (2, '5px, 5px, auto, 10px', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + r + B + B + B + r + _ + _ + _,
        _ + _ + _ + _ + _ + _ + B + B + B + B + B + _ + _ + _,
        _ + _ + _ + _ + _ + _ + B + B + B + B + B + _ + _ + _,
        _ + _ + _ + _ + _ + _ + B + B + B + B + B + _ + _ + _,
        _ + _ + _ + _ + _ + _ + r + B + B + B + r + _ + _ + _,
        _ + _ + _ + _ + _ + _ + B + B + B + B + B + _ + _ + _,
        _ + _ + _ + _ + _ + _ + g + g + g + g + g + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ]),
    (3, '5px, auto, 9px, 10px', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + g + r + B + B + B + r + B + B + B + r + _ + _ + _,
        _ + g + B + B + B + B + B + B + B + B + B + _ + _ + _,
        _ + g + B + B + B + B + B + B + B + B + B + _ + _ + _,
        _ + g + B + B + B + B + B + B + B + B + B + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ]),
    (4, 'auto, 5px, 9px, 10px', [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + g + g + g + g + g + _ + _ + _,
        _ + _ + _ + _ + _ + _ + r + B + B + B + r + _ + _ + _,
        _ + _ + _ + _ + _ + _ + B + B + B + B + B + _ + _ + _,
        _ + _ + _ + _ + _ + _ + B + B + B + B + B + _ + _ + _,
        _ + _ + _ + _ + _ + _ + B + B + B + B + B + _ + _ + _,
        _ + _ + _ + _ + _ + _ + r + B + B + B + r + _ + _ + _,
        _ + _ + _ + _ + _ + _ + B + B + B + B + B + _ + _ + _,
        _ + _ + _ + _ + _ + _ + B + B + B + B + B + _ + _ + _,
        _ + _ + _ + _ + _ + _ + B + B + B + B + B + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ]),
))
def test_clip(number, css, pixels):
    assert_pixels('background_repeat_clipped_%s' % number, 14, 16, pixels, '''
      <style>
        @page { size: 14px 16px; background: #fff }
        div { margin: 1px; border: 1px green solid;
              background: url(pattern.png);
              position: absolute; /* clip only applies on abspos */
              top: 0; bottom: 2px; left: 0; right: 0;
              clip: rect(%s); }
      </style>
      <div>''' % css)


opacity_source = '''
    <style>
        @page { size: 60px 60px }
        body { margin: 0; background: #fff }
        div { background: #000; width: 20px; height: 20px }
    </style>
    %s'''


@assert_no_logs
def test_opacity_1():
    assert_same_rendering(60, 60, [
        ('opacity_0_reference', opacity_source % '''
            <div></div>
        '''),
        ('opacity_0', opacity_source % '''
            <div></div>
            <div style="opacity: 0"></div>
        '''),
    ])


@assert_no_logs
def test_opacity_2():
    assert_same_rendering(60, 60, [
        ('opacity_color_reference', opacity_source % '''
            <div style="background: rgb(102, 102, 102)"></div>
        '''),
        ('opacity_color', opacity_source % '''
            <div style="opacity: 0.6"></div>
        '''),
    ])


@assert_no_logs
def test_opacity_3():
    assert_same_rendering(60, 60, [
        ('opacity_multiplied_reference', opacity_source % '''
            <div style="background: rgb(102, 102, 102)"></div>
        '''),
        ('opacity_multiplied', opacity_source % '''
            <div style="opacity: 0.6"></div>
        '''),
        ('opacity_multiplied_2', opacity_source % '''
            <div style="background: none; opacity: 0.666666">
                <div style="opacity: 0.9"></div>
            </div>
        '''),  # 0.9 * 0.666666 == 0.6
    ])


@assert_no_logs
def test_current_color_1():
    assert_pixels('background_current_color', 2, 2, [G + G, G + G], '''
      <style>
        @page { size: 2px }
        html, body { height: 100%; margin: 0 }
        html { color: red; background: currentColor }
        body { color: lime; background: inherit }
      </style>
      <body>''')


@assert_no_logs
def test_current_color_2():
    assert_pixels('border_current_color', 2, 2, [G + G, G + G], '''
      <style>
        @page { size: 2px }
        html { color: red; border-color: currentColor }
        body { color: lime; border: 1px solid; border-color: inherit;
               margin: 0 }
      </style>
      <body>''')


@assert_no_logs
def test_current_color_3():
    assert_pixels('outline_current_color', 2, 2, [G + G, G + G], '''
      <style>
        @page { size: 2px }
        html { color: red; outline-color: currentColor }
        body { color: lime; outline: 1px solid; outline-color: inherit;
               margin: 1px }
      </style>
      <body>''')


@assert_no_logs
def test_current_color_4():
    assert_pixels('border_collapse_current_color', 2, 2, [G + G, G + G], '''
      <style>
        @page { size: 2px }
        html { color: red; border-color: currentColor; }
        body { margin: 0 }
        table { border-collapse: collapse;
                color: lime; border: 1px solid; border-color: inherit }
      </style>
      <table><td>''')


@assert_no_logs
def test_2d_transform_1():
    assert_pixels('image_rotate90', 8, 8, [
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + r + _ + _,
        _ + _ + B + B + B + B + _ + _,
        _ + _ + B + B + B + B + _ + _,
        _ + _ + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
    ], '''
      <style>
        @page { size: 8px; margin: 2px; background: #fff; }
        div { transform: rotate(90deg); font-size: 0 }
      </style>
      <div><img src="pattern.png"></div>''')


@assert_no_logs
def test_2d_transform_2():
    assert_pixels('image_translateX_rotate90', 12, 12, [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + B + B + B + r + _ + _ + _,
        _ + _ + _ + _ + _ + B + B + B + B + _ + _ + _,
        _ + _ + _ + _ + _ + B + B + B + B + _ + _ + _,
        _ + _ + _ + _ + _ + B + B + B + B + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ], '''
      <style>
        @page { size: 12px; margin: 2px; background: #fff; }
        div { transform: translateX(3px) rotate(90deg);
              font-size: 0; width: 4px }
      </style>
      <div><img src="pattern.png"></div>''')


@assert_no_logs
def test_2d_transform_3():
    # A translateX after the rotation is actually a translateY
    assert_pixels('image_rotate90_translateX', 12, 12, [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + r + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ], '''
      <style>
        @page { size: 12px; margin: 2px; background: #fff; }
        div { transform: rotate(90deg) translateX(3px);
              font-size: 0; width: 4px }
      </style>
      <div><img src="pattern.png"></div>''')


@assert_no_logs
def test_2d_transform_4():
    assert_pixels('nested_rotate90_translateX', 12, 12, [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + r + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ], '''
      <style>
        @page { size: 12px; margin: 2px; background: #fff; }
        div { transform: rotate(90deg); font-size: 0; width: 4px }
        img { transform: translateX(3px) }
      </style>
      <div><img src="pattern.png"></div>''')


@assert_no_logs
def test_2d_transform_5():
    assert_pixels('image_reflection', 8, 8, [
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + B + B + B + r + _ + _,
        _ + _ + B + B + B + B + _ + _,
        _ + _ + B + B + B + B + _ + _,
        _ + _ + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
    ], '''
      <style>
        @page { size: 8px; margin: 2px; background: #fff; }
        div { transform: matrix(-1, 0, 0, 1, 0, 0); font-size: 0 }
      </style>
      <div><img src="pattern.png"></div>''')


@assert_no_logs
def test_2d_transform_6():
    assert_pixels('image_translate', 8, 8, [
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + r + B + B + B + _,
        _ + _ + _ + B + B + B + B + _,
        _ + _ + _ + B + B + B + B + _,
        _ + _ + _ + B + B + B + B + _,
    ], '''
      <style>
        @page { size: 8px; margin: 2px; background: #fff; }
        div { transform: translate(1px, 2px); font-size: 0 }
      </style>
      <div><img src="pattern.png"></div>''')


@assert_no_logs
def test_2d_transform_7():
    assert_pixels('image_translate_percentage', 8, 8, [
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + r + B + B + B + _,
        _ + _ + _ + B + B + B + B + _,
        _ + _ + _ + B + B + B + B + _,
        _ + _ + _ + B + B + B + B + _,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
    ], '''
      <style>
        @page { size: 8px; margin: 2px; background: #fff; }
        div { transform: translate(25%, 0); font-size: 0 }
      </style>
      <div><img src="pattern.png"></div>''')


@assert_no_logs
def test_2d_transform_8():
    assert_pixels('image_translateX', 8, 8, [
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + r + B + B,
        _ + _ + _ + _ + _ + B + B + B,
        _ + _ + _ + _ + _ + B + B + B,
        _ + _ + _ + _ + _ + B + B + B,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
    ], '''
      <style>
        @page { size: 8px; margin: 2px; background: #fff; }
        div { transform: translateX(0.25em); font-size: 12px }
        div div { font-size: 0 }
      </style>
      <div><div><img src="pattern.png"></div></div>''')


@assert_no_logs
def test_2d_transform_9():
    assert_pixels('image_translateY', 8, 8, [
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + r + B + B + B + _ + _,
        _ + _ + B + B + B + B + _ + _,
        _ + _ + B + B + B + B + _ + _,
        _ + _ + B + B + B + B + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _,
    ], '''
      <style>
        @page { size: 8px; margin: 2px; background: #fff; }
        div { transform: translateY(-1px); font-size: 0 }
      </style>
      <div><img src="pattern.png"></div>''')


@assert_no_logs
def test_2d_transform_10():
    assert_pixels('image_scale', 10, 10, [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + r + r + B + B + B + B + B + B + _,
        _ + r + r + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ], '''
      <style>
        @page { size: 10px; margin: 2px; background: #fff; }
        div { transform: scale(2, 2);
              transform-origin: 1px 1px;
              image-rendering: pixelated;
              font-size: 0 }
      </style>
      <div><img src="pattern.png"></div>''')


@assert_no_logs
def test_2d_transform_11():
    assert_pixels('image_scale12', 10, 10, [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + r + B + B + B + _ + _ + _ + _,
        _ + _ + r + B + B + B + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ], '''
      <style>
        @page { size: 10px; margin: 2px; background: #fff; }
        div { transform: scale(1, 2);
              transform-origin: 1px 1px;
              image-rendering: pixelated;
              font-size: 0 }
      </style>
      <div><img src="pattern.png"></div>''')


@assert_no_logs
def test_2d_transform_12():
    assert_pixels('image_scaleY', 10, 10, [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + r + B + B + B + _ + _ + _ + _,
        _ + _ + r + B + B + B + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _,
        _ + _ + B + B + B + B + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ], '''
      <style>
        @page { size: 10px; margin: 2px; background: #fff; }
        div { transform: scaleY(2);
              transform-origin: 1px 1px;
              image-rendering: pixelated;
              font-size: 0 }
      </style>
      <div><img src="pattern.png"></div>''')


@assert_no_logs
def test_2d_transform_13():
    assert_pixels('image_scaleX', 10, 10, [
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + r + r + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + B + B + B + B + B + B + B + B + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
        _ + _ + _ + _ + _ + _ + _ + _ + _ + _,
    ], '''
      <style>
        @page { size: 10px; margin: 2px; background: #fff; }
        div { transform: scaleX(2);
              transform-origin: 1px 1px;
              image-rendering: pixelated;
              font-size: 0 }
      </style>
      <div><img src="pattern.png"></div>''')


@assert_no_logs
@requires('cairo', (1, 12, 0))
def test_acid2():
    def render(filename):
        return HTML(resource_filename(filename)).render(enable_hinting=True)

    with capture_logs():
        # This is a copy of http://www.webstandards.org/files/acid2/test.html
        document = render('acid2-test.html')
        intro_page, test_page = document.pages
        # Ignore the intro page: it is not in the reference
        test_image, width, height = document.copy(
            [test_page]).write_image_surface()

    # This is a copy of http://www.webstandards.org/files/acid2/reference.html
    ref_image, ref_width, ref_height = render(
        'acid2-reference.html').write_image_surface()

    assert (width, height) == (ref_width, ref_height)
    assert_pixels_equal(
        'acid2', width, height, image_to_pixels(test_image, width, height),
        image_to_pixels(ref_image, width, height), tolerance=2)


@assert_no_logs
@requires('cairo', (1, 14, 0))
def test_linear_gradients_1():
    assert_pixels('linear_gradient', 5, 9, [
        _ + _ + _ + _ + _,
        _ + _ + _ + _ + _,
        _ + _ + _ + _ + _,
        B + B + B + B + B,
        B + B + B + B + B,
        r + r + r + r + r,
        r + r + r + r + r,
        r + r + r + r + r,
        r + r + r + r + r,
    ], '''<style>@page { size: 5px 9px; background: linear-gradient(
      white, white 3px, blue 0, blue 5px, red 0, red
    )''')


@assert_no_logs
@requires('cairo', (1, 14, 0))
def test_linear_gradients_2():
    assert_pixels('linear_gradient', 5, 9, [
        _ + _ + _ + _ + _,
        _ + _ + _ + _ + _,
        _ + _ + _ + _ + _,
        B + B + B + B + B,
        B + B + B + B + B,
        r + r + r + r + r,
        r + r + r + r + r,
        r + r + r + r + r,
        r + r + r + r + r,
    ], '''<style>@page { size: 5px 9px; background: linear-gradient(
      white 3px, blue 0, blue 5px, red 0
    )''')


@assert_no_logs
@requires('cairo', (1, 14, 0))
def test_linear_gradients_3():
    assert_pixels('linear_gradient', 9, 5, [
        _ + _ + _ + B + B + r + r + r + r,
        _ + _ + _ + B + B + r + r + r + r,
        _ + _ + _ + B + B + r + r + r + r,
        _ + _ + _ + B + B + r + r + r + r,
        _ + _ + _ + B + B + r + r + r + r,
    ], '''<style>@page { size: 9px 5px; background: linear-gradient(
      to right, white 3px, blue 0, blue 5px, red 0
    )''')


@assert_no_logs
@requires('cairo', (1, 14, 0))
def test_linear_gradients_4():
    assert_pixels('linear_gradient', 10, 5, [
        B + B + B + B + B + B + r + r + r + r,
        B + B + B + B + B + B + r + r + r + r,
        B + B + B + B + B + B + r + r + r + r,
        B + B + B + B + B + B + r + r + r + r,
        B + B + B + B + B + B + r + r + r + r,
    ], '''<style>@page { size: 10px 5px; background: linear-gradient(
      to right, blue 5px, blue 6px, red 6px, red 9px
    )''')


@assert_no_logs
@requires('cairo', (1, 14, 0))
def test_linear_gradients_5():
    assert_pixels('linear_gradient', 10, 5, [
        r + B + r + r + r + B + r + r + r + B,
        r + B + r + r + r + B + r + r + r + B,
        r + B + r + r + r + B + r + r + r + B,
        r + B + r + r + r + B + r + r + r + B,
        r + B + r + r + r + B + r + r + r + B,
    ], '''<style>@page { size: 10px 5px; background: repeating-linear-gradient(
      to right, blue 50%, blue 60%, red 60%, red 90%
    )''')


@assert_no_logs
@requires('cairo', (1, 14, 0))
def test_linear_gradients_6():
    assert_pixels('linear_gradient', 9, 5, [
        B + B + B + r + r + r + r + r + r,
        B + B + B + r + r + r + r + r + r,
        B + B + B + r + r + r + r + r + r,
        B + B + B + r + r + r + r + r + r,
        B + B + B + r + r + r + r + r + r,
    ], '''<style>@page { size: 9px 5px; background: linear-gradient(
      to right, blue 3px, blue 3px, red 3px, red 3px
    )''')


@assert_no_logs
@requires('cairo', (1, 14, 0))
def test_linear_gradients_7():
    assert_pixels('linear_gradient', 9, 5, [
        v + v + v + v + v + v + v + v + v,
        v + v + v + v + v + v + v + v + v,
        v + v + v + v + v + v + v + v + v,
        v + v + v + v + v + v + v + v + v,
        v + v + v + v + v + v + v + v + v,
    ], '''<style>@page { size: 9px 5px; background: repeating-linear-gradient(
      to right, blue 3px, blue 3px, red 3px, red 3px
    )''')


@assert_no_logs
@requires('cairo', (1, 14, 0))
def test_linear_gradients_8():
    assert_pixels('linear_gradient', 9, 5, [
        V + V + V + V + V + V + V + V + V,
        V + V + V + V + V + V + V + V + V,
        V + V + V + V + V + V + V + V + V,
        V + V + V + V + V + V + V + V + V,
        V + V + V + V + V + V + V + V + V,
    ], '''
      <style>
        @page { size: 9px 5px; background: repeating-linear-gradient(
                  to right, blue 50%, blue 60%, red 60%, red 90%);
        background-size: 1px 1px''')


@assert_no_logs
def test_radial_gradients_1():
    assert_pixels('radial_gradient', 6, 6, [
        B + B + B + B + B + B,
        B + B + B + B + B + B,
        B + B + B + B + B + B,
        B + B + B + B + B + B,
        B + B + B + B + B + B,
        B + B + B + B + B + B,
    ], '''<style>@page { size: 6px; background:
      radial-gradient(red -30%, blue -10%)''')


@assert_no_logs
def test_radial_gradients_2():
    assert_pixels('radial_gradient', 6, 6, [
        r + r + r + r + r + r,
        r + r + r + r + r + r,
        r + r + r + r + r + r,
        r + r + r + r + r + r,
        r + r + r + r + r + r,
        r + r + r + r + r + r,
    ], '''<style>@page { size: 6px; background:
      radial-gradient(red 110%, blue 130%)''')


@assert_no_logs
def test_radial_gradients_3():
    for thin, gradient in ((False, 'red 20%, blue 80%'),
                           (True, 'red 50%, blue 50%')):
        _, pixels = html_to_pixels(
            'radial_gradient_' + gradient, 10, 16,
            '<style>@page { size: 10px 16px; background: radial-gradient(%s)'
            % gradient)

        def pixel(x, y):
            i = (x + 10 * y) * 4
            return pixels[i:i + 4]
        assert pixel(0, 0) == B
        assert pixel(9, 0) == B
        assert pixel(0, 15) == B
        assert pixel(9, 15) == B
        assert pixel(4, 7) == r
        assert pixel(4, 8) == r
        assert pixel(5, 7) == r
        assert pixel(5, 8) == r
        assert (pixel(3, 5) not in (B, r)) ^ thin
        assert (pixel(3, 9) not in (B, r)) ^ thin
        assert (pixel(7, 5) not in (B, r)) ^ thin
        assert (pixel(7, 9) not in (B, r)) ^ thin


@assert_no_logs
@requires('cairo', (1, 14, 0))
def test_column_rule_1():
    assert_pixels('solid', 5, 3, [
        a + _ + r + _ + a,
        a + _ + r + _ + a,
        _ + _ + _ + _ + _,
    ], '''
      <style>
        img { display: inline-block; width: 1px; height: 1px }
        div { columns: 2; column-rule-style: solid;
              column-rule-width: 1px; column-gap: 3px;
              column-rule-color: red }
        body { margin: 0; font-size: 0; background: white}
        @page { margin: 0; size: 5px 3px }
      </style>
      <div>
        <img src=blue.jpg>
        <img src=blue.jpg>
        <img src=blue.jpg>
        <img src=blue.jpg>
      </div>''')


@assert_no_logs
@requires('cairo', (1, 14, 0))
def test_column_rule_2():
    assert_pixels('dotted', 5, 3, [
        a + _ + r + _ + a,
        a + _ + _ + _ + a,
        a + _ + r + _ + a,
    ], '''
      <style>
        img { display: inline-block; width: 1px; height: 1px }
        div { columns: 2; column-rule-style: dotted;
              column-rule-width: 1px; column-gap: 3px;
              column-rule-color: red }
        body { margin: 0; font-size: 0; background: white}
        @page { margin: 0; size: 5px 3px }
      </style>
      <div>
        <img src=blue.jpg>
        <img src=blue.jpg>
        <img src=blue.jpg>
        <img src=blue.jpg>
        <img src=blue.jpg>
        <img src=blue.jpg>
      </div>''')
